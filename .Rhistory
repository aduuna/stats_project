cost.pca = prcomp(cost)
summary(cost.pca)
# Summary of data
colMeans(cost)
colSds(data.matrix(cost))
cost.pca[,1]
cost.pca$x[,1]
factors = [cost, service_quality, product_features, brand_image]
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
i$factor_average <- rowMeans(i);
view(i)
i$factor_average <- rowMeans(i);
for(i in factors){
view(i)
i$factor_average <- rowMeans(i);
}
for(i in factors){
i$factor_average <- rowMeans(i);
}
factors = c(cost, service_quality, product_features, brand_image)
for(i in factors){
i$factor_average <- rowMeans(i);
}
for(i in factors){
typeof(i)
i$factor_average <- rowMeans(i);
}
for(i in factors){
typeof(i)
#i$factor_average <- rowMeans(i);
}
for(i in factors){
print(typeof(i))
#i$factor_average <- rowMeans(i);
}
print(i)
for(i in factors){
print(typeof(i))
print(i)
#i$factor_average <- rowMeans(i);
}
typeof(cost)
factors = list(cost, service_quality, product_features, brand_image)
for(i in factors){
print(typeof(i))
print(i)
#i$factor_average <- rowMeans(i);
}
for(i in factors){
print(typeof(i))
#i$factor_average <- rowMeans(i);
}
for(i in factors){
i$factor_average <- rowMeans(i);
}
View(cost)
View(i)
View(i)
cost$factor_average <- rowMeans(cost)
View(i)
cost$factor_average <- rowMeans(cost)
service_quality <- rowMeans(service_quality)
product_features$factor_average <- rowMeans(product_features)
brand_image$factor_average <- rowMeans(brand_image)
service_quality = responses[,c(12,13,14)]
View(service_quality)
cost$factor_average <- rowMeans(cost)
service_quality$factor_average <- rowMeans(service_quality)
product_features$factor_average <- rowMeans(product_features)
brand_image$factor_average <- rowMeans(brand_image)
View(responses)
#append factors to the origiona dataset
responses$cost = cost$factor_average
responses$service_quality = service_quality$factor_average
responses$product_features = product_features$factor_average
responses$brand_image = brand_image$factor_average
# check for class bias i the response variable
raw.data <- responses
table(raw.data$average_Y)
# dealing with class bias of more 1's than 0's
zeros = raw.data[which(raw.data$average_Y == 0), ]
ones = raw.data[which(raw.data$average_Y == 1), ]
# split data into train and test data
sample_obs <- function(data, train_fraction){
sample(1:nrow(data), train_fraction * nrow(data));
}
set.seed(1234)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=raw.data)
summary(logit.model)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- predict(logit.model, test_data, type="response")
predicted
predicted <- plogis(predict(logit.model, test_data))
predicted
predicted = ifelse(predicte > 0.5, 1, 0)
predicted = ifelse(predicted > 0.5, 1, 0)
predicted
accuracy = mean(predicted == test_data$average_Y)
accuracy
predicted == test_data$average_Y
set.seed(1000)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(1234)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(1)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(1111)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
accuracy = mean(predicted == test_data$average_Y)
predicted = ifelse(predicted > 0.5, 1, 0)
print(accuracy)
set.seed(1111)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(3)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(00003)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
set.seed(300)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(average_Y ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$average_Y)
print(accuracy)
#install.packages(c("ltm", "Amelia", "matrixStats"))
library("ltm")
library(Amelia)
library(matrixStats)
#Import collected data from google forms in exce format
responses = read.csv("res_og_12.csv")
# clean our data
missmap(responses, main="raw responses data")
brand_switching = responses[,c(5,6)]
cost = responses[,c(9,10,11)]
service_quality = responses[,c(12,13,14)]
product_features = responses[,c(15,16,17)]
brand_image = responses[,c(18,19,20)]
# cronbach's reliability alpha
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
cost$factor_average <- rowMeans(cost)
service_quality$factor_average <- rowMeans(service_quality)
product_features$factor_average <- rowMeans(product_features)
brand_image$factor_average <- rowMeans(brand_image)
#append factors to the origiona dataset
responses$cost = cost$factor_average
responses$service_quality = service_quality$factor_average
responses$product_features = product_features$factor_average
responses$brand_image = brand_image$factor_average
# PCA
# cost.pca = prcomp(cost)
# summary(cost.pca)
# service_quality.pca = prcomp(service_quality)
# summary(service_quality.pca)
# Summary of data
colMeans(cost)
colSds(data.matrix(cost))
colMeans(service_quality)
colSds(data.matrix(service_quality))
colMeans(product_features)
colSds(data.matrix(product_features))
colMeans(brand_image)
colSds(data.matrix(brand_image))
colMeans(brand_switching)
colSds(data.matrix(brand_switching))
# check for class bias i the response variable
raw.data <- responses
table(raw.data$brand_switching)
# dealing with class bias of more 1's than 0's
zeros = raw.data[which(raw.data$brand_switching == 0), ]
ones = raw.data[which(raw.data$brand_switching == 1), ]
# split data into train and test data
sample_obs <- function(data, train_fraction){
sample(1:nrow(data), train_fraction * nrow(data));
}
set.seed(300)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(brand_switching ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$brand_switching)
print(accuracy)
car::vif(logit.model)
cars::vif(logit.model)
install.packages("car")
car::vif(model)
car::vif(logit.model)
#install.packages(c("ltm", "Amelia", "matrixStats", "car"))
library("ltm")
library(Amelia)
library(matrixStats)
#Import collected data from google forms in exce format
responses = read.csv("res_og_12.csv")
# clean our data
missmap(responses, main="raw responses data")
brand_switching = responses[,c(5,6)]
cost = responses[,c(9,10,11)]
service_quality = responses[,c(12,13,14)]
product_features = responses[,c(15,16,17)]
brand_image = responses[,c(18,19,20)]
# cronbach's reliability alpha
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
cost$factor_average <- rowMeans(cost)
service_quality$factor_average <- rowMeans(service_quality)
product_features$factor_average <- rowMeans(product_features)
brand_image$factor_average <- rowMeans(brand_image)
#append factors to the origiona dataset
responses$cost = cost$factor_average
responses$service_quality = service_quality$factor_average
responses$product_features = product_features$factor_average
responses$brand_image = brand_image$factor_average
# PCA
# cost.pca = prcomp(cost)
# summary(cost.pca)
# service_quality.pca = prcomp(service_quality)
# summary(service_quality.pca)
# Summary of data
colMeans(cost)
colSds(data.matrix(cost))
colMeans(service_quality)
colSds(data.matrix(service_quality))
colMeans(product_features)
colSds(data.matrix(product_features))
colMeans(brand_image)
colSds(data.matrix(brand_image))
colMeans(brand_switching)
colSds(data.matrix(brand_switching))
# check for class bias i the response variable
raw.data <- responses
table(raw.data$brand_switching)
# dealing with class bias of more 1's than 0's
zeros = raw.data[which(raw.data$brand_switching == 0), ]
ones = raw.data[which(raw.data$brand_switching == 1), ]
# split data into train and test data
sample_obs <- function(data, train_fraction){
sample(1:nrow(data), train_fraction * nrow(data));
}
set.seed(300)
samp = sample_obs(zeros, 0.9); train_zeros = zeros[samp, ]; test_zeros = zeros[-samp, ]
samp = sample_obs(ones, 0.9); train_ones = ones[samp, ]; test_ones = ones[-samp, ]
train_data = rbind(train_ones, train_zeros)
test_data = rbind(test_ones, test_zeros)
logit.model = glm(brand_switching ~ cost + service_quality + product_features + brand_image, family="binomial", data=train_data)
summary(logit.model)
predicted <- plogis(predict(logit.model, test_data))
predicted = ifelse(predicted > 0.5, 1, 0)
accuracy = mean(predicted == test_data$brand_switching)
print(accuracy)
#multicolinearity
car::vif(logit.model)
#multicolinearity
car::vif(logit.model)
plot(logit.model)
mean(logit.model$residuals)
summary(logit.model)
par(mfrow=c(2,2))
plot(logit.model)
uni.logit.model.1 = glm(brand_switching ~ cost, family="binomial")
uni.logit.model.1 = glm(brand_switching ~ cost, family="binomial", data=train_data)
plot(uni.logit.model.1)
summary(uni.logit.model.1)
plot(uni.logit.model.2)
uni.logit.model.2 = glm(brand_switching ~ service_quality, family="binomial", data=train_data)
summary(uni.logit.model.2)
plot(uni.logit.model.2)
summary(logit.model)
summary(uni.logit.model.2)
set.seed(300)
uni.logit.model.2 = glm(brand_switching ~ service_quality, family="binomial", data=train_data)
summary(uni.logit.model.2)
plot(uni.logit.model.2)
summary(uni.logit.model.1)
uni.logit.model.3 = glm(brand_switching ~ product_features, family="binomial", data=train_data)
summary(uni.logit.model.3)
plot(uni.logit.model.3)
uni.logit.model.1 = glm(brand_switching ~ cost, family="binomial", data=raw.data)
summary(uni.logit.model.1)
plot(uni.logit.model.1)
uni.logit.model.2 = glm(brand_switching ~ service_quality, family="binomial", data=raw.data)
summary(uni.logit.model.2)
plot(uni.logit.model.2)
uni.logit.model.3 = glm(brand_switching ~ product_features, family="binomial", data=raw.data)
summary(uni.logit.model.3)
plot(uni.logit.model.3)
uni.logit.model.4 = glm(brand_switching ~ brand_image, family="binomial", data=raw.data)
summary(uni.logit.model.4)
plot(uni.logit.model.4)
?pairs
# graph allvars
pairs(brand_switching ~ cost + service_quality + product_features + brand_image, data=raw.data)
# graph allvars
pairs(~ cost + service_quality + product_features + brand_image, data=raw.data)
# Summary of data
colMeans(cost)
colSds(data.matrix(cost))
colMeans(service_quality)
colSds(data.matrix(service_quality))
colMeans(product_features)
colSds(data.matrix(product_features))
colMeans(brand_image)
colSds(data.matrix(brand_image))
colMeans(brand_switching)
colSds(data.matrix(brand_switching))
library(matrixStats)
# Summary of data
colMeans(cost)
colSds(data.matrix(cost))
colMeans(service_quality)
colSds(data.matrix(service_quality))
colMeans(product_features)
colSds(data.matrix(product_features))
colMeans(brand_image)
colSds(data.matrix(brand_image))
colMeans(brand_switching)
colSds(data.matrix(brand_switching))
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
#install.packages(c("ltm", "Amelia", "matrixStats", "car"))
library("ltm")
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
brand_switching = responses[,c(5,6)]
cost = responses[,c(9,10,11)]
service_quality = responses[,c(12,13,14)]
product_features = responses[,c(15,16,17)]
brand_image = responses[,c(18,19,20)]
# cronbach's reliability alpha
cronbach.alpha(brand_switching)
cronbach.alpha(cost)
cronbach.alpha(service_quality)
cronbach.alpha(product_features)
cronbach.alpha(brand_image)
library(ggplot2)
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
geom_histogram()
library(ggplot2)
install.packages(ggplot2)
install.packages("tidyverse")
library(ggplot2)
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
geom_histogram()
?aes
sex <- factor(raw.data$Gender)
grp <- cut(raw.data$age, breaks = seq(15, 21, 27, 35), include.lowest = TRUE)
grp <- cut(raw.data$age, breaks = seq(15, 28, 3), include.lowest = TRUE)
grp <- cut(raw.data$Age, breaks = seq(15, 28, 3), include.lowest = TRUE)
view(grp)
view.data(grp)
View(grp)
df <- data.frame(age, sex, grp)
df <- data.frame(raw.data$Age, sex, grp)
ggplot(df, aes(x = age, fill = sex))
+ geom_histogram()
+ geom_histogram()
ggplot(df, aes(x = age, fill = sex))
ggplot(df, aes(x = Age, fill = sex))
+ geom_histogram(bins = 6, position = "dodge")
rlang::last_error()
ggplot(df, aes(x = Age, fill = sex))+ geom_histogram(bins = 6, position = "dodge")
age <- raw.data$Age
grp <- cut(age, breaks = seq(15, 28, 3), include.lowest = TRUE)
df <- data.frame(age, sex, grp)
ggplot(df, aes(x = age, fill = sex))+ geom_histogram(bins = 6, position = "dodge")
ggplot(df, aes(x = age, fill = sex))+ geom_histogram(bins = 6)
ggplot(df, aes(x = age, fill = sex))+ geom_histogram(bins = 3)
ggplot(df, aes(x = grp, fill = sex))+ geom_histogram()
df <- data.frame(age, sex, grp)
ggplot(df, aes(x = grp, fill = sex))+ geom_histogram()
ggplot(df, aes(x = grp, fill = sex))+ geom_bar()
age <- raw.data$Age
age[is.na(age)] <- mean(age,na.rm=T)
grp <- cut(age, breaks = seq(15, 28, 3), include.lowest = TRUE)
df <- data.frame(age, sex, grp)
ggplot(df, aes(x = grp, fill = sex))+ geom_bar()
view(age)
View(age)
grp <- cut(age, breaks = seq(15, 35, 3), include.lowest = TRUE)
df <- data.frame(age, sex, grp)
ggplot(df, aes(x = grp, fill = sex))+ geom_bar()
barplot(raw.data$Occupation)
barplot(factor(raw.data$Occupation))
ggplot(raw.data, aes(raw.data$occupation)) +geom_bar()
ggplot(raw.data, aes(occupation)) +geom_bar()
ggplot(raw.data, aes(Occupation)) +geom_bar()
income = raw.data[,22]
ggplot(raw.data, aes(income)) +geom_bar()
ggplot(raw.data, aes(income)) +geom_bar()+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar()+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar(fill="white")+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar(fill="blue")+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar(fill="gray")+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar()+theme_classic()
ggplot(raw.data, aes(income)) +geom_bar()
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('Four','Six','Eight', "",""))
+ scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
income = factor(raw.data[,22])
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
income = raw.data[,22]
)
income = factor(raw.data[,22])
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
income = factor(raw.data[,22], levels=c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
income
income = factor(raw.data[,22])
income
income = as.numeric(gsub("Â¢", "¢", income))
income = factor(raw.data[,22])
income = gsub("Â¢", "¢", income)
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
income = factor(income, levels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
ggplot(raw.data, aes(income)) +geom_bar() + scale_x_discrete(labels = c('below ¢500','¢500-¢999','¢1000-¢1499', "¢1500-¢2000","above ¢2000"))
# graph allvars
pairs(~ cost + service_quality + product_features + brand_image, data=raw.data)
